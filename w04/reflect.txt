///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #4
Full Name  : Hyunjoo Han
Student ID#: 132749227

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. With the completion of this workshop, you must have begun to appreciate why code formatting is important. Explain how you made your code – especially the iteration and selection logic parts – easy to read and maintain.

>>I understand how important it is to make a code easy to read and maintain. Because it can be longterm project for multiple users. If it is only clear to myself, it would be difficult to success on group project.
 First of all, I made the variable simple and meaningful, not too long so that it is easier to understand and readable. 
 And I made the code easily readable by making the code structures in consistent format. Since there is some repetition in the code for selection(e.g. Apple/Orange/Pear/Tomato/Cabbage), it makes the whole code quite long which will most likely make others tired. So it is necessary to make the structure consistent. Otherwise it will be confusing as well. I also think if I need to, adding comment will help as well for others. 


2. Nested logic is an important feature of programming in any language. Identify and briefly discuss the biggest impact on how this workshop could be coded if nesting were not possible.

>>When I want to excuse the result as it is written in the instruction, I need to make a complex structure of logic. It can't be done with simple structure since multiple things have to be considered. If it is only yes/no or true/false decision, it would be more simple and even nested logic might not be necessary. But it is more than choosing an option. It is decision making.
 In the first part, to make the user to put valid input(not negative, not 0), I need to use loop so that the code will run until right value is there. And if it is not valid, error message has to be printed. Again, many things have to be considered. If nesting were not possible, the code would be so much more complicated and long. Then it is hard to organize the code format. Even if I managed to make the code without nesting, later on, it would be very difficult to modify the code. Because the format wouldn't be organized well. 
 Also, If there is no nested logic inside the loop, it is very hard to control. There should be some condition to exit the loop sometimes. Nested logic gives that control.

3. Consider the following scenario: you are programming logic that requires a user to input a value between 1 and 5, and for each value within that range, you had to perform something unique. You would have to apply selection to validate the entered values so you can implement the given logic for a specific entered range value. Explain why is it inefficient to achieve this using a series of “if” optional path constructs instead of the preferred “if/else if...” alternative path logic?

>>Because, if I use series of "if" optional path constructs, the program will execute every single "if" options until the end. But in this scenario, that is not needed. If the program find the unique which match the user's input, it can just exit. "If/else if" make that happen because program will execute "else if" only if the "if" statement is not true.  


















