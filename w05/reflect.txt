///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Hyunjoo Han
Student ID#: 132749227

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers (constant literals)? Using the details of this workshop, describe at least three advantages this provides us?

  In this workshop, I had to use the macros MIN_YEAR, MAX_YEAR, and LOG_DAYS. For the first loop, I used a do-while loop, which contains MIN_YEAR/MAX_YEAR values of 2012/2022. This means that when a user inputs a year, it must be between 2012 and 2022 (inclusive). If I had used the numbers directly as magic numbers, their meaning would not have been clear. However, by using macros with descriptive names, it becomes easier for someone reading the code to understand their purpose. Therefore, in this case, macros make the code more understandable and readable. 
  In the future, if we need to edit the values of 'Minimum Year-MIN_YEAR', 'Maximum Year-MAX_YEAR', or 'Number of days to log-LOG_DAYS', we can simply change the numbers in the macros. If we had used magic numbers instead, it would still be possible to fix them, but it would be much more time-consuming. Therefore, using macros allows for easier and quicker modifications to these values.



2. The rating values entered by the user required iteration to perform basic validations with each iteration concentrated on testing for values to be within a specific range. Why do we not include additional logic that sums and performs the average? Instead, the sum and average logic is placed outside of any validation routine. Briefly explain two reasons why this is better design and refer to the details of this workshop to justify your answer.

  If we incorporate additional logic, the structure of the code will become much longer as we would need to obtain each rating value separately, calculate the sum of morning/evening rates, total rate, morning/evening average rates, and total average. This would result in a lot of repetition. In this workshop, we only had to obtain values for 3 days. However, it could be up to a maximum of 31 days. In that case, we would need 31 morning rating values and 31 evening values, making the code excessively long.
  Furthermore, if we adopt that approach, we would have to manually edit the code whenever we want to extend the number of days for the rating. On the other hand, by utilizing iteration with macros, we simply need to change the value of 'LOG_DAYS' to the desired number of days.